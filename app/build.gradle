apply plugin: 'com.android.application'
apply from: rootProject.file("buildsystem/checkstyle.gradle")
apply plugin: 'walle'

android {

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        applicationId "com.youloft.lilith"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }
    signingConfigs {
        youloft signs.youloft
    }
    buildTypes {
        release {
            signingConfig signingConfigs.youloft
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        beta {
            signingConfig signingConfigs.youloft
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.youloft
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
}

/**
 * 获取日期串
 * @return
 */
def getDate() {
    TimeZone.setDefault(TimeZone.getTimeZone("GMT+8"));
    Calendar cal = Calendar.getInstance();
    def date = cal.getTime();
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}
/**
 * 改变包路径
 * @param type
 */
def changeApkPath(String type, String buldType) {
    def dateString = getDate();
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.name == buldType) {
                def releaseApkName = android.defaultConfig.applicationId + "_" + type + "_" + android.defaultConfig.versionName + "_" + android.defaultConfig.versionCode + '.apk'
                output.outputFile = new File(rootProject.rootDir.getAbsolutePath() + "/output/Lilith/" + versionName + "/" + type + "/" + dateString, releaseApkName)
            }
        }
    }
}

/**
 * 编译测试任务
 */
task buildPublish(dependsOn: 'assembleRelease') {

    dependsOn {
        changeApkPath("publish", "release");
        android.applicationVariants.all { variant ->
            if (variant.name == 'debug') {
                task("generateJavadoc", type: Javadoc) {
                    description "Generates Javadoc for $variant.name."
                    source = variant.javaCompile.source
                    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
                    classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
                    destinationDir = new File(rootProject.rootDir.getAbsolutePath() + "/output/Lilith/$versionName/javadoc/")
                    options.links("http://docs.oracle.com/javase/7/docs/api/");
                    options.links("http://d.android.com/reference/");
                    failOnError false
                }
                buildPublish.dependsOn(generateJavadoc)
            }
        }
    }
}

/**
 * 编译Beta任务
 */
task buildBeta(dependsOn: 'assembleBeta') {
    dependsOn {
        changeApkPath("beta", "beta");
    }
}

/**
 * 编译Alpha任务
 */
task buildAlpha(dependsOn: 'assembleDebug') {
    dependsOn {
        changeApkPath("alpha", "debug");
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile libraries.supportAppCompat
    compile libraries.fastjson
    compile libraries.constraintlayout
    compile libraries.eventbus
    compile libraries.retrofit
    compile libraries.walle
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'com.trello.rxlifecycle2:rxlifecycle:2.1.0'
    compile 'com.trello.rxlifecycle2:rxlifecycle-android:2.1.0'
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile project(':umeng-socialize')
    compile project(':statistics')
    //butterknife
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'
    //glide
    compile 'com.github.bumptech.glide:glide:4.0.0-RC1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.0.0-RC1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //arouter
    compile 'com.alibaba:arouter-api:1.1.0'
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.0'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'jp.wasabeef:blurry:2.1.1'
    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
}

//渠道打包配置
walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels/");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}